/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegexImport } from './routes/regex'
import { Route as NotesImport } from './routes/notes'

// Create Virtual Routes

const YamlJsonLazyImport = createFileRoute('/yaml-json')()
const YamlFmtLazyImport = createFileRoute('/yaml-fmt')()
const WebBeautifyLazyImport = createFileRoute('/web-beautify')()
const UrlViewerLazyImport = createFileRoute('/url-viewer')()
const SqlFmtLazyImport = createFileRoute('/sql-fmt')()
const JwtDecodeLazyImport = createFileRoute('/jwt-decode')()
const JsonnetLazyImport = createFileRoute('/jsonnet')()
const JsonFmtLazyImport = createFileRoute('/json-fmt')()
const JqLazyImport = createFileRoute('/jq')()
const HtmlLazyImport = createFileRoute('/html')()
const Base64LazyImport = createFileRoute('/base64')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const YamlJsonLazyRoute = YamlJsonLazyImport.update({
  id: '/yaml-json',
  path: '/yaml-json',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/yaml-json.lazy').then((d) => d.Route))

const YamlFmtLazyRoute = YamlFmtLazyImport.update({
  id: '/yaml-fmt',
  path: '/yaml-fmt',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/yaml-fmt.lazy').then((d) => d.Route))

const WebBeautifyLazyRoute = WebBeautifyLazyImport.update({
  id: '/web-beautify',
  path: '/web-beautify',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/web-beautify.lazy').then((d) => d.Route))

const UrlViewerLazyRoute = UrlViewerLazyImport.update({
  id: '/url-viewer',
  path: '/url-viewer',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/url-viewer.lazy').then((d) => d.Route))

const SqlFmtLazyRoute = SqlFmtLazyImport.update({
  id: '/sql-fmt',
  path: '/sql-fmt',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/sql-fmt.lazy').then((d) => d.Route))

const JwtDecodeLazyRoute = JwtDecodeLazyImport.update({
  id: '/jwt-decode',
  path: '/jwt-decode',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/jwt-decode.lazy').then((d) => d.Route))

const JsonnetLazyRoute = JsonnetLazyImport.update({
  id: '/jsonnet',
  path: '/jsonnet',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/jsonnet.lazy').then((d) => d.Route))

const JsonFmtLazyRoute = JsonFmtLazyImport.update({
  id: '/json-fmt',
  path: '/json-fmt',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/json-fmt.lazy').then((d) => d.Route))

const JqLazyRoute = JqLazyImport.update({
  id: '/jq',
  path: '/jq',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/jq.lazy').then((d) => d.Route))

const HtmlLazyRoute = HtmlLazyImport.update({
  id: '/html',
  path: '/html',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/html.lazy').then((d) => d.Route))

const Base64LazyRoute = Base64LazyImport.update({
  id: '/base64',
  path: '/base64',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/base64.lazy').then((d) => d.Route))

const RegexRoute = RegexImport.update({
  id: '/regex',
  path: '/regex',
  getParentRoute: () => rootRoute,
} as any)

const NotesRoute = NotesImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/notes': {
      id: '/notes'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof NotesImport
      parentRoute: typeof rootRoute
    }
    '/regex': {
      id: '/regex'
      path: '/regex'
      fullPath: '/regex'
      preLoaderRoute: typeof RegexImport
      parentRoute: typeof rootRoute
    }
    '/base64': {
      id: '/base64'
      path: '/base64'
      fullPath: '/base64'
      preLoaderRoute: typeof Base64LazyImport
      parentRoute: typeof rootRoute
    }
    '/html': {
      id: '/html'
      path: '/html'
      fullPath: '/html'
      preLoaderRoute: typeof HtmlLazyImport
      parentRoute: typeof rootRoute
    }
    '/jq': {
      id: '/jq'
      path: '/jq'
      fullPath: '/jq'
      preLoaderRoute: typeof JqLazyImport
      parentRoute: typeof rootRoute
    }
    '/json-fmt': {
      id: '/json-fmt'
      path: '/json-fmt'
      fullPath: '/json-fmt'
      preLoaderRoute: typeof JsonFmtLazyImport
      parentRoute: typeof rootRoute
    }
    '/jsonnet': {
      id: '/jsonnet'
      path: '/jsonnet'
      fullPath: '/jsonnet'
      preLoaderRoute: typeof JsonnetLazyImport
      parentRoute: typeof rootRoute
    }
    '/jwt-decode': {
      id: '/jwt-decode'
      path: '/jwt-decode'
      fullPath: '/jwt-decode'
      preLoaderRoute: typeof JwtDecodeLazyImport
      parentRoute: typeof rootRoute
    }
    '/sql-fmt': {
      id: '/sql-fmt'
      path: '/sql-fmt'
      fullPath: '/sql-fmt'
      preLoaderRoute: typeof SqlFmtLazyImport
      parentRoute: typeof rootRoute
    }
    '/url-viewer': {
      id: '/url-viewer'
      path: '/url-viewer'
      fullPath: '/url-viewer'
      preLoaderRoute: typeof UrlViewerLazyImport
      parentRoute: typeof rootRoute
    }
    '/web-beautify': {
      id: '/web-beautify'
      path: '/web-beautify'
      fullPath: '/web-beautify'
      preLoaderRoute: typeof WebBeautifyLazyImport
      parentRoute: typeof rootRoute
    }
    '/yaml-fmt': {
      id: '/yaml-fmt'
      path: '/yaml-fmt'
      fullPath: '/yaml-fmt'
      preLoaderRoute: typeof YamlFmtLazyImport
      parentRoute: typeof rootRoute
    }
    '/yaml-json': {
      id: '/yaml-json'
      path: '/yaml-json'
      fullPath: '/yaml-json'
      preLoaderRoute: typeof YamlJsonLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/notes': typeof NotesRoute
  '/regex': typeof RegexRoute
  '/base64': typeof Base64LazyRoute
  '/html': typeof HtmlLazyRoute
  '/jq': typeof JqLazyRoute
  '/json-fmt': typeof JsonFmtLazyRoute
  '/jsonnet': typeof JsonnetLazyRoute
  '/jwt-decode': typeof JwtDecodeLazyRoute
  '/sql-fmt': typeof SqlFmtLazyRoute
  '/url-viewer': typeof UrlViewerLazyRoute
  '/web-beautify': typeof WebBeautifyLazyRoute
  '/yaml-fmt': typeof YamlFmtLazyRoute
  '/yaml-json': typeof YamlJsonLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/notes': typeof NotesRoute
  '/regex': typeof RegexRoute
  '/base64': typeof Base64LazyRoute
  '/html': typeof HtmlLazyRoute
  '/jq': typeof JqLazyRoute
  '/json-fmt': typeof JsonFmtLazyRoute
  '/jsonnet': typeof JsonnetLazyRoute
  '/jwt-decode': typeof JwtDecodeLazyRoute
  '/sql-fmt': typeof SqlFmtLazyRoute
  '/url-viewer': typeof UrlViewerLazyRoute
  '/web-beautify': typeof WebBeautifyLazyRoute
  '/yaml-fmt': typeof YamlFmtLazyRoute
  '/yaml-json': typeof YamlJsonLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/notes': typeof NotesRoute
  '/regex': typeof RegexRoute
  '/base64': typeof Base64LazyRoute
  '/html': typeof HtmlLazyRoute
  '/jq': typeof JqLazyRoute
  '/json-fmt': typeof JsonFmtLazyRoute
  '/jsonnet': typeof JsonnetLazyRoute
  '/jwt-decode': typeof JwtDecodeLazyRoute
  '/sql-fmt': typeof SqlFmtLazyRoute
  '/url-viewer': typeof UrlViewerLazyRoute
  '/web-beautify': typeof WebBeautifyLazyRoute
  '/yaml-fmt': typeof YamlFmtLazyRoute
  '/yaml-json': typeof YamlJsonLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/notes'
    | '/regex'
    | '/base64'
    | '/html'
    | '/jq'
    | '/json-fmt'
    | '/jsonnet'
    | '/jwt-decode'
    | '/sql-fmt'
    | '/url-viewer'
    | '/web-beautify'
    | '/yaml-fmt'
    | '/yaml-json'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/notes'
    | '/regex'
    | '/base64'
    | '/html'
    | '/jq'
    | '/json-fmt'
    | '/jsonnet'
    | '/jwt-decode'
    | '/sql-fmt'
    | '/url-viewer'
    | '/web-beautify'
    | '/yaml-fmt'
    | '/yaml-json'
  id:
    | '__root__'
    | '/'
    | '/notes'
    | '/regex'
    | '/base64'
    | '/html'
    | '/jq'
    | '/json-fmt'
    | '/jsonnet'
    | '/jwt-decode'
    | '/sql-fmt'
    | '/url-viewer'
    | '/web-beautify'
    | '/yaml-fmt'
    | '/yaml-json'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  NotesRoute: typeof NotesRoute
  RegexRoute: typeof RegexRoute
  Base64LazyRoute: typeof Base64LazyRoute
  HtmlLazyRoute: typeof HtmlLazyRoute
  JqLazyRoute: typeof JqLazyRoute
  JsonFmtLazyRoute: typeof JsonFmtLazyRoute
  JsonnetLazyRoute: typeof JsonnetLazyRoute
  JwtDecodeLazyRoute: typeof JwtDecodeLazyRoute
  SqlFmtLazyRoute: typeof SqlFmtLazyRoute
  UrlViewerLazyRoute: typeof UrlViewerLazyRoute
  WebBeautifyLazyRoute: typeof WebBeautifyLazyRoute
  YamlFmtLazyRoute: typeof YamlFmtLazyRoute
  YamlJsonLazyRoute: typeof YamlJsonLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  NotesRoute: NotesRoute,
  RegexRoute: RegexRoute,
  Base64LazyRoute: Base64LazyRoute,
  HtmlLazyRoute: HtmlLazyRoute,
  JqLazyRoute: JqLazyRoute,
  JsonFmtLazyRoute: JsonFmtLazyRoute,
  JsonnetLazyRoute: JsonnetLazyRoute,
  JwtDecodeLazyRoute: JwtDecodeLazyRoute,
  SqlFmtLazyRoute: SqlFmtLazyRoute,
  UrlViewerLazyRoute: UrlViewerLazyRoute,
  WebBeautifyLazyRoute: WebBeautifyLazyRoute,
  YamlFmtLazyRoute: YamlFmtLazyRoute,
  YamlJsonLazyRoute: YamlJsonLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/notes",
        "/regex",
        "/base64",
        "/html",
        "/jq",
        "/json-fmt",
        "/jsonnet",
        "/jwt-decode",
        "/sql-fmt",
        "/url-viewer",
        "/web-beautify",
        "/yaml-fmt",
        "/yaml-json"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/notes": {
      "filePath": "notes.tsx"
    },
    "/regex": {
      "filePath": "regex.tsx"
    },
    "/base64": {
      "filePath": "base64.lazy.tsx"
    },
    "/html": {
      "filePath": "html.lazy.tsx"
    },
    "/jq": {
      "filePath": "jq.lazy.tsx"
    },
    "/json-fmt": {
      "filePath": "json-fmt.lazy.tsx"
    },
    "/jsonnet": {
      "filePath": "jsonnet.lazy.tsx"
    },
    "/jwt-decode": {
      "filePath": "jwt-decode.lazy.tsx"
    },
    "/sql-fmt": {
      "filePath": "sql-fmt.lazy.tsx"
    },
    "/url-viewer": {
      "filePath": "url-viewer.lazy.tsx"
    },
    "/web-beautify": {
      "filePath": "web-beautify.lazy.tsx"
    },
    "/yaml-fmt": {
      "filePath": "yaml-fmt.lazy.tsx"
    },
    "/yaml-json": {
      "filePath": "yaml-json.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
